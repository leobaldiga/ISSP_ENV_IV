col.var = "black",
geom = c("point", "text"),
title = "PCA Biplot")
shinyApp(ui, server)
library(shiny)
library(sf)
library(ggtern)
library(tricolore)
ui <- fluidPage(
titlePanel(title = 'Tricolore: A flexible color scale for ternary compositions'),
sidebarLayout(
# INPUT
sidebarPanel(width = 3,
radioButtons(inputId = 'data', label = 'Data', inline = TRUE,
choices = list('Labour force' = 'lf',
'Education' = 'educ'),
selected = 'educ'),
radioButtons(inputId = 'type', label = 'Type', inline = TRUE,
choices = list('Default' = 'tricolore',
'Sextant' = 'sextant'),
selected = 'tricolore'),
conditionalPanel(
condition = 'input.type == "tricolore"',
sliderInput(inputId = 'hue', label = 'Hue', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.2),
sliderInput(inputId = 'chroma', label = 'Chroma', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.7),
sliderInput(inputId = 'lightness', label = 'Lightness', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.8),
sliderInput(inputId = 'contrast', label = 'Contrast', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.4),
sliderInput(inputId = 'spread', label = 'Spread',
min = 0.5, max = 2, step = 0.1, value = 1, ticks = FALSE),
checkboxInput(inputId = 'discrete', label = 'Discrete', value = FALSE),
conditionalPanel(
condition = 'input.discrete',
sliderInput(inputId = 'breaks', label = 'Breaks', ticks = FALSE,
min = 2, max = 20, step = 1, value = 4)
)),
checkboxInput(inputId = 'center', label = 'Mean centering',
value = FALSE),
checkboxInput(inputId = 'show_center', label = 'Show center',
value = FALSE),
checkboxInput(inputId = 'show_data', label = 'Show data',
value = TRUE),
checkboxInput(inputId = 'crop', label = 'Crop legend',
value = FALSE),
radioButtons(inputId = 'label_as', label = 'Label as',
choices = list('percent-share' = 'pct',
'pct-pt. difference' = 'pct_diff'),
selected = 'pct'),
verbatimTextOutput(outputId = 'call')
),
# OUTPUT
mainPanel(plotOutput(outputId = 'example'))
)
)
server <- function(input, output) {
output$call <- renderText({
paste0(
if (input$type == 'tricolore') 'Tricolore(',
if (input$type == 'sextant') 'TricoloreSextant(',
"euro_example, ",
if (input$data == 'educ') "p1 = 'ed_0to2', p2 = 'ed_3to4', p3 = 'ed_5to8'",
if (input$data == 'lf') "p1 = 'lf_pri', p2 = 'lf_sec', p3 = 'lf_ter'",
', center = ', ifelse(input$center, 'NA', 'rep(1/3,3)'),
if (input$type == 'tricolore') {
paste0(
', breaks = ', ifelse(input$discrete, input$breaks, 'Inf'),
', hue = ', input$hue,
', chroma = ', input$chroma,
', lightness = ', input$lightness,
', contrast = ', input$contrast,
', spread = ', input$spread
)
},
', legend = TRUE',
', show_data = ', input$show_data,
', show_center = ', input$show_center,
', label_as = "', input$label_as, '"',
', crop = ', input$crop, ')'
)
})
output$example <- renderPlot(res = 120, width = 1000, height = 800, {
if (input$data == 'educ') {
p1 = 'ed_0to2'; p2 = 'ed_3to4'; p3 = 'ed_5to8'
title = 'Compos. of education lvls in European regions 2016\n'
}
if (input$data == 'lf') {
p1 = 'lf_pri'; p2 = 'lf_sec'; p3 = 'lf_ter'
title = 'Labor force composition in European regions 2016\n'
}
if (input$type == 'tricolore') {
# mix color, generate legend
mixed <- Tricolore(euro_example,
p1 = p1, p2 = p2, p3 = p3,
center = if (input$center) NA else rep(1/3,3),
breaks = ifelse(input$discrete, input$breaks, Inf),
hue = input$hue, chroma = input$chroma,
lightness = input$lightness,
contrast = input$contrast,
spread = input$spread,
show_data = input$show_data,
show_center = input$show_center,
label_as = input$label_as,
crop = input$crop,
legend = TRUE)
}
if (input$type == 'sextant') {
# mix color, generate legend
mixed <- TricoloreSextant(euro_example,
p1 = p1, p2 = p2, p3 = p3,
center = if (input$center) NA else rep(1/3,3),
show_data = input$show_data,
show_center = input$show_center,
label_as = input$label_as,
crop = input$crop,
legend = TRUE)
}
# customize legend
lgnd <- mixed[['key']] +
labs(x = 'Primary', y = 'Secondary', z = 'Tertiary',
subtitle =
paste0(
title,
ifelse(input$center,
'Colors show deviation from average composition',
'Colors show deviations from balanced composition\n'),
'Data by eurostat'
)
) +
theme(
plot.background = element_rect(fill = 'grey95', color = 'grey50'),
plot.subtitle = element_text(size = 9)
)
# merge data and map
euro_example$rgb <- mixed[['rgb']]
# generate map
euro_map <-
euro_basemap +
geom_sf(aes(fill = rgb, geometry = geometry), color = NA,
data = euro_example) +
annotation_custom(ggplotGrob(lgnd),
xmin = 54e5, xmax = 74e5,
ymin = 8e5, ymax = 80e5) +
scale_fill_identity() +
coord_sf(expand = FALSE, datum = NA)
print(euro_map)
})
}
shinyApp(ui, server)
DemoTricolore()
server <- function(input, output) {
output$call <- renderText({
paste0(
if (input$type == 'tricolore') 'Tricolore(',
if (input$type == 'sextant') 'TricoloreSextant(',
"euro_example, ",
if (input$data == 'educ') "p1 = 'ed_0to2', p2 = 'ed_3to4', p3 = 'ed_5to8'",
if (input$data == 'lf') "p1 = 'lf_pri', p2 = 'lf_sec', p3 = 'lf_ter'",
', center = ', ifelse(input$center, 'NA', 'rep(1/3,3)'),
if (input$type == 'tricolore') {
paste0(
', breaks = ', ifelse(input$discrete, input$breaks, 'Inf'),
', hue = ', input$hue,
', chroma = ', input$chroma,
', lightness = ', input$lightness,
', contrast = ', input$contrast,
', spread = ', input$spread
)
},
', legend = TRUE',
', show_data = ', input$show_data,
', show_center = ', input$show_center,
', label_as = "', input$label_as, '"',
', crop = ', input$crop, ')'
)
})
output$example <- renderPlot(res = 120, width = 1000, height = 800, {
if (input$data == 'educ') {
p1 = 'ed_0to2'; p2 = 'ed_3to4'; p3 = 'ed_5to8'
title = 'Compos. of education lvls in European regions 2016\n'
}
if (input$data == 'lf') {
p1 = 'lf_pri'; p2 = 'lf_sec'; p3 = 'lf_ter'
title = 'Labor force composition in European regions 2016\n'
}
if (input$type == 'tricolore') {
# mix color, generate legend
mixed <- Tricolore(euro_example,
p1 = p1, p2 = p2, p3 = p3,
center = if (input$center) NA else rep(1/3,3),
breaks = ifelse(input$discrete, input$breaks, Inf),
hue = input$hue, chroma = input$chroma,
lightness = input$lightness,
contrast = input$contrast,
spread = input$spread,
show_data = input$show_data,
show_center = input$show_center,
label_as = input$label_as,
crop = input$crop,
legend = TRUE)
}
if (input$type == 'sextant') {
# mix color, generate legend
mixed <- TricoloreSextant(euro_example,
p1 = p1, p2 = p2, p3 = p3,
center = if (input$center) NA else rep(1/3,3),
show_data = input$show_data,
show_center = input$show_center,
label_as = input$label_as,
crop = input$crop,
legend = TRUE)
}
# customize legend
lgnd <- mixed[['key']] +
labs(x = 'Primary', y = 'Secondary', z = 'Tertiary',
subtitle =
paste0(
title,
ifelse(input$center,
'Colors show deviation from average composition',
'Colors show deviations from balanced composition\n'),
'Data by eurostat'
)
) +
theme(
plot.background = element_rect(fill = 'grey95', color = 'grey50'),
plot.subtitle = element_text(size = 9)
)
# merge data and map
euro_example$rgb <- mixed[['rgb']]
# generate map
euro_map <-
euro_basemap +
geom_sf(aes(fill = rgb, geometry = geometry), color = NA,
data = euro_example) +
annotation_custom(ggplotGrob(lgnd),
xmin = 54e5, xmax = 74e5,
ymin = 8e5, ymax = 80e5) +
scale_fill_identity() +
coord_sf(expand = FALSE, datum = NA)
print(euro_map)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel(title = 'Tricolore: A flexible color scale for ternary compositions'),
sidebarLayout(
# INPUT
sidebarPanel(width = 3,
radioButtons(inputId = 'data', label = 'Data', inline = TRUE,
choices = list('Labour force' = 'lf',
'Education' = 'educ'),
selected = 'educ'),
radioButtons(inputId = 'type', label = 'Type', inline = TRUE,
choices = list('Default' = 'tricolore',
'Sextant' = 'sextant'),
selected = 'tricolore'),
conditionalPanel(
condition = 'input.type == "tricolore"',
sliderInput(inputId = 'hue', label = 'Hue', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.2),
sliderInput(inputId = 'chroma', label = 'Chroma', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.7),
sliderInput(inputId = 'lightness', label = 'Lightness', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.8),
sliderInput(inputId = 'contrast', label = 'Contrast', ticks = FALSE,
min = 0, max = 1, step = 0.1, value = 0.4),
sliderInput(inputId = 'spread', label = 'Spread',
min = 0.5, max = 2, step = 0.1, value = 1, ticks = FALSE),
checkboxInput(inputId = 'discrete', label = 'Discrete', value = FALSE),
conditionalPanel(
condition = 'input.discrete',
sliderInput(inputId = 'breaks', label = 'Breaks', ticks = FALSE,
min = 2, max = 20, step = 1, value = 4)
)),
checkboxInput(inputId = 'center', label = 'Mean centering',
value = FALSE),
checkboxInput(inputId = 'show_center', label = 'Show center',
value = FALSE),
checkboxInput(inputId = 'show_data', label = 'Show data',
value = TRUE),
checkboxInput(inputId = 'crop', label = 'Crop legend',
value = FALSE),
radioButtons(inputId = 'label_as', label = 'Label as',
choices = list('percent-share' = 'pct',
'pct-pt. difference' = 'pct_diff'),
selected = 'pct'),
verbatimTextOutput(outputId = 'call')
),
# OUTPUT
mainPanel(plotOutput(outputId = 'example'))
)
)
source("~/.active-rstudio-document", echo=TRUE)
install.packages('ggtern')
update('sf')
install.packages('sf')
library(shiny); runApp('tricolore.R')
runApp('tricolore.R')
# generate map
euro_map <-
euro_basemap +
geom_sf(aes(fill = rgb, geometry = geometry), color = NA,
data = euro_example) +
annotation_custom(ggplotGrob(lgnd),
xmin = 54e5, xmax = 74e5,
ymin = 8e5, ymax = 80e5) +
scale_fill_identity() +
coord_sf(expand = FALSE, datum = NA)
# customize legend
lgnd <- mixed[['key']] +
labs(x = 'Primary', y = 'Secondary', z = 'Tertiary',
subtitle =
paste0(
title,
ifelse(input$center,
'Colors show deviation from average composition',
'Colors show deviations from balanced composition\n'),
'Data by eurostat'
)
) +
theme(
plot.background = element_rect(fill = 'grey95', color = 'grey50'),
plot.subtitle = element_text(size = 9)
)
# mix color, generate legend
mixed <- TricoloreSextant(euro_example,
p1 = p1, p2 = p2, p3 = p3,
center = if (input$center) NA else rep(1/3,3),
show_data = input$show_data,
show_center = input$show_center,
label_as = input$label_as,
crop = input$crop,
legend = TRUE)
server <- function(input, output) {
output$call <- renderText({
paste0(
if (input$type == 'tricolore') 'Tricolore(',
if (input$type == 'sextant') 'TricoloreSextant(',
"euro_example, ",
if (input$data == 'educ') "p1 = 'ed_0to2', p2 = 'ed_3to4', p3 = 'ed_5to8'",
if (input$data == 'lf') "p1 = 'lf_pri', p2 = 'lf_sec', p3 = 'lf_ter'",
', center = ', ifelse(input$center, 'NA', 'rep(1/3,3)'),
if (input$type == 'tricolore') {
paste0(
', breaks = ', ifelse(input$discrete, input$breaks, 'Inf'),
', hue = ', input$hue,
', chroma = ', input$chroma,
', lightness = ', input$lightness,
', contrast = ', input$contrast,
', spread = ', input$spread
)
},
', legend = TRUE',
', show_data = ', input$show_data,
', show_center = ', input$show_center,
', label_as = "', input$label_as, '"',
', crop = ', input$crop, ')'
)
})
output$example <- renderPlot(res = 120, width = 1000, height = 800, {
if (input$data == 'educ') {
p1 = 'ed_0to2'; p2 = 'ed_3to4'; p3 = 'ed_5to8'
title = 'Compos. of education lvls in European regions 2016\n'
}
if (input$data == 'lf') {
p1 = 'lf_pri'; p2 = 'lf_sec'; p3 = 'lf_ter'
title = 'Labor force composition in European regions 2016\n'
}
if (input$type == 'tricolore') {
# mix color, generate legend
mixed <- Tricolore(euro_example,
p1 = p1, p2 = p2, p3 = p3,
center = if (input$center) NA else rep(1/3,3),
breaks = ifelse(input$discrete, input$breaks, Inf),
hue = input$hue, chroma = input$chroma,
lightness = input$lightness,
contrast = input$contrast,
spread = input$spread,
show_data = input$show_data,
show_center = input$show_center,
label_as = input$label_as,
crop = input$crop,
legend = TRUE)
}
if (input$type == 'sextant') {
# mix color, generate legend
mixed <- TricoloreSextant(euro_example,
p1 = p1, p2 = p2, p3 = p3,
center = if (input$center) NA else rep(1/3,3),
show_data = input$show_data,
show_center = input$show_center,
label_as = input$label_as,
crop = input$crop,
legend = TRUE)
}
# customize legend
lgnd <- mixed[['key']] +
labs(x = 'Primary', y = 'Secondary', z = 'Tertiary',
subtitle =
paste0(
title,
ifelse(input$center,
'Colors show deviation from average composition',
'Colors show deviations from balanced composition\n'),
'Data by eurostat'
)
) +
theme(
plot.background = element_rect(fill = 'grey95', color = 'grey50'),
plot.subtitle = element_text(size = 9)
)
# merge data and map
euro_example$rgb <- mixed[['rgb']]
# generate map
euro_map <-
euro_basemap +
geom_sf(aes(fill = rgb, geometry = geometry), color = NA,
data = euro_example) +
annotation_custom(ggplotGrob(lgnd),
xmin = 54e5, xmax = 74e5,
ymin = 8e5, ymax = 80e5) +
scale_fill_identity() +
coord_sf(expand = FALSE, datum = NA)
print(euro_map)
})
}
# generate map
euro_map <-
euro_basemap +
geom_sf(aes(fill = rgb, geometry = geometry), color = NA,
data = euro_example) +
annotation_custom(ggplotGrob(lgnd),
xmin = 54e5, xmax = 74e5,
ymin = 8e5, ymax = 80e5) +
scale_fill_identity() +
coord_sf(expand = FALSE, datum = NA)
load("~/Library/CloudStorage/GoogleDrive-leobaldiga@gmail.com/My Drive/Grad School/Classes/Spring 2024/GEO865/ISSP_ENV_IV/.RData")
knitr::opts_chunk$set(echo = TRUE)
library(haven)
library(lavaan)
library(psych)
library(tidyr)
library(dplyr)
library(dm)
library(writexl)
library(kableExtra)
library(webshot2)
library(ggplot2)
library(likert)
library(knitr)
library(stringr)
library(scales)
library(gridExtra)
load(".RData")
Data = read_dta('ZA7650_v2-0-0.dta')
source("~/Library/CloudStorage/GoogleDrive-leobaldiga@gmail.com/My Drive/Grad School/Classes/Spring 2024/GEO865/ISSP_ENV_IV/ISSP_Env_IV.R", echo=TRUE)
#A kable table of the countries included in the dataset with the number of respondents from each country, with each column having 7 countries x 4 columns
country_counts <- Postcoded %>%
count(country) %>%
mutate(id = row_number())
# Create a data frame to hold the alternating structure
wide_format <- data.frame(matrix(ncol = 8, nrow = 7))
colnames(wide_format) <- c("Country", "n", "Country", "n", "Country", "n", "Country", "n")
# Fill the new data frame with country names and counts
for(i in 1:nrow(country_counts)) {
col_index <- ((i - 1) %% 4) * 2 + 1
row_index <- ((i - 1) %/% 4) + 1
wide_format[row_index, col_index] <- country_counts$country[i]
wide_format[row_index, col_index + 1] <- country_counts$n[i]
}
# Remove NA values and replace them with empty strings for a cleaner table
wide_format[is.na(wide_format)] <- ""
# Create the table with kable and add columns
kable_styling(
kable(wide_format, format = "html", escape = FALSE, col.names = rep(c("Country", "N"), 4),
caption = "Table 1: Number of Respondents from Each Country"),
bootstrap_options = c("striped", "hover")
) %>%
column_spec(2, border_right = "2px solid") %>%
column_spec(4, border_right = "2px solid") %>%
column_spec(6, border_right = "2px solid")
# Create a data frame to hold the alternating structure
wide_format <- data.frame(matrix(ncol = 8, nrow = 7))
colnames(wide_format) <- c("Country", "n", "Country", "n", "Country", "n", "Country", "n")
# Fill the new data frame with country names and counts
for(i in 1:nrow(country_counts)) {
col_index <- ((i - 1) %% 4) * 2 + 1
row_index <- ((i - 1) %/% 4) + 1
wide_format[row_index, col_index] <- country_counts$country[i]
wide_format[row_index, col_index + 1] <- country_counts$n[i]
}
# Remove NA values and replace them with empty strings for a cleaner table
wide_format[is.na(wide_format)] <- ""
# Create the table with kable and add columns
kable_styling(
kable(wide_format, format = "html", escape = FALSE, col.names = rep(c("Country", "N"), 4),
caption = "Table 1: Number of Respondents from Each Country"),
bootstrap_options = c("striped", "hover")
) %>%
column_spec(2, border_right = "2px solid") %>%
column_spec(4, border_right = "2px solid") %>%
column_spec(6, border_right = "2px solid")
env_concerns <- c("threxg20", "prghrm20", "worent20", "morimp20", "others20")
#create additive index 'enatt20' and 'enatt20_mean' for env_concerns variables, removing '6'
Assignment_3 <- Postcoded %>%
filter_at(vars(env_concerns), all_vars(. != 6)) %>%
mutate(enatt20 = rowSums(.[env_concerns], na.rm = TRUE),
enatt20_mean = rowMeans(.[env_concerns], na.rm = TRUE))
save.image("~/Library/CloudStorage/GoogleDrive-leobaldiga@gmail.com/My Drive/Grad School/Classes/Spring 2024/GEO865/ISSP_ENV_IV/.RData.RData")
